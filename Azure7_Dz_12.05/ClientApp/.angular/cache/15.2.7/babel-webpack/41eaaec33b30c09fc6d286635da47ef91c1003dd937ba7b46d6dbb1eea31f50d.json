{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Author } from '../Models/Author';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthorService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAuthors() {\n    return this.http.get('https://localhost:7079/api/Author').pipe(map(data => {\n      // Преобразование данных JSON в массив объектов Author\n      console.log(data);\n      return data.map(authorData => {\n        return new Author(authorData.id, authorData.name, authorData.yearofbirth, authorData.books);\n      });\n    }));\n  }\n}\nAuthorService.ɵfac = function AuthorService_Factory(t) {\n  return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorService,\n  factory: AuthorService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,MAAM,QAAQ,kBAAkB;;;AAGzC,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAExCC,UAAU;IACR,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAW,mCAAmC,CAAC,CAACC,IAAI,CACtEP,GAAG,CAAEQ,IAAc,IAAI;MACrB;MACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,OAAOA,IAAI,CAACR,GAAG,CAACW,UAAU,IAAG;QAC3B,OAAO,IAAIV,MAAM,CACfU,UAAU,CAACC,EAAE,EACbD,UAAU,CAACE,IAAI,EACfF,UAAU,CAACG,WAAW,EACtBH,UAAU,CAACI,KAAK,CACjB;MACH,CAAC,CAAC;IACJ,CAAC,CAAC,CACH;EACH;;AAlBWb,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAc,SAAbd,aAAa;AAAA","names":["map","Author","AuthorService","constructor","http","getAuthors","get","pipe","data","console","log","authorData","id","name","yearofbirth","books","factory"],"sourceRoot":"","sources":["C:\\Users\\artuo\\source\\repos\\Azure7_Dz_12.05\\Azure7_Dz_12.05\\ClientApp\\src\\app\\Services\\AuthorService.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Author } from '../Models/Author';\r\nimport { Injectable } from '@angular/core';\r\n@Injectable()\r\nexport class AuthorService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAuthors(): Observable<Author[]> {\r\n    return this.http.get<Author[]>('https://localhost:7079/api/Author').pipe(\r\n      map((data: Author[]) => {\r\n        // Преобразование данных JSON в массив объектов Author\r\n        console.log(data);\r\n        return data.map(authorData => {\r\n          return new Author(\r\n            authorData.id,\r\n            authorData.name,\r\n            authorData.yearofbirth,\r\n            authorData.books\r\n          );\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}